* Seven Concurrency Models in Seven Weeks
** Threads and Locks (Java)
*** Threads and Intrinsic Locks - Lock, Mutex, Critical Section
*** Beyond Shared State and Basic Abstractions - Memory Model (JSR 133)
*** Atomic Variables, Thread Pools
** Functional Programming (Clojure)
*** Immutability and Functional Approach
*** Reducers and Functional Concurrency
*** Functional Parallelism
** Separating identity from State (Clojure)
*** Atoms
**** Impure != Imperative
**** Structure sharing is possible thanks to immutability
*** Agents and Refs
**** Agent != Actor
**** References - coordination, Agents & Atoms - isolation
**** Retries favors side-effect free functions
*** STM (Software Transactional Memory)
**** Transactions are not bad, support for "ACI" without "D"
**** Retries favors side-effect free functions
** Actors (Elixir)
** Communicating Sequential Processes (Clojure)
** Data Parallelism (OpenCL, C)
** The Lambda Architecture (Java)
