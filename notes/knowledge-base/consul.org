* Consul

** Details

Service discovery and configuration management tool, with multi data center
support which is distributed, highly available and DevOps friendly.

https://consul.io/

** Features

*** Highly Available

- It is built on top of gossip protocols, which provide discoverability, proper
  failure detection and liveness properties.
  - It distinguishes service failure and machine liveness from deliberate
    cluster left.
- It is much lighter than Nagios, because it uses push method - so clients are
  deciding what to send.
  - Nagios does remote checks in pull manner, so basically for bigger clusters
    you have bigger load.
  - For Consul, checks are pushed from the edge when something change, liveness
    and machine failures are handled by gossip pool protocol.

*** Service Discovery

- It provides standard protocols for service discovery:
  - DNS - with all possibilities related with *blind round-robin*, *SRV* records
    giving additional metadata.
  - Rich HTTP API.

*** Health-Check

- It has built-in health-check mechanisms which are local to machine, so they
  are not require any communication over SSH, when doing checks.
  - Moreover, in that model if Consult will report that service is alive there
    is no need to transfer additional data over the network. It can transfer
    them only *when something change*, this is much easier and resilient e.g.
    network errors and false positives because of that.

*** Configuration Management

- It has built-in key-value store accessible over built-in web UI and rich HTTP
  API.
- It can expose data over JSON or in the form of environment variables
  (`envconsul`).
- Moreover, thanks to the gossip protocol changes are spread through the cluster
  very quickly (< 1s for ~1k nodes).
- In multi data center scenario changes are exchanged in the WAN gossip ring
  only between servers, and clients are forwarding queries to the servers.
  - There are only 3 or 5 servers in the DC which are servers.
  - They are handling synchronization with use of Raft consensus protocol.

*** Multi Data Center Friendliness

- In many data centers, there is no need for connecting all nodes with full mesh.
  - We can connect only servers from all data centers in so called WAN gossip
    ring. It requires at most 3 * N (or 5 * N - it depends of amount of servers
    in DC) connections, where N is a number of DCs.
  - Rest nodes (clients) thanks to ability of handing-over queries to server
    does not have to know about all other nodes and changes in KV.

*** DevOps Friendliness

- It does not hide anything from you, you have standard UNIX mechanism (e.g.
  environment variables) or richer APIs (e.g. HTTP) available to you.
  - The only requirement is to parse JSON.
- It easily integrates with existing services thanks to:
  - `consul-templating` - ability to render any file with using KV and local
    state.
  - Watches and Events - with ability to filter them on the service / tag level.
  - Remote Execution (over SSH) or specific commands.
  - Using standard mechanisms for executing commands, UNIX signals for
    restarting services and being good UNIX citizen at all.
