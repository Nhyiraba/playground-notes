* Erlang - Tracing
** Definition
  - A specialized use of logging to record information about program's
    execution.
    - Built-in support in virtual machine. You can trace on function calls,
      message passing, function in / out. You can redirect results to process,
      *stdout*, socket etc.
    - Based on probes, which are exposing information - even to the OS level
      (`systemtap` / `dtrace` integration).
** Use Cases
   - Development (no more `io:format/2` in the code).
   - Debugging and investigation (even on production, because overhead and
     impact is smaller than you might expect).
   - Profiling (tools like `fprof` or `eflame` use that).
** Features
   - Tracing Control Word (32-bit integer value for enabling / disabling, making
     a flag from that, counting, which is available in match specification and
     when zeroed, virtual machine stops tracing).
** Erlang 19.0 and new things
  - Updated and improved architecture (direct communication with trace
    receivers) and removed *global lock order*.
  - Tracer modules as a replacement for match specification, avoiding sending
    via process.
    - Module should expose `enabled/3` and `trace/6`.
  - Adding `lttng` back-end (it will be available together with `systemtap`
    and `dtrace`).
  - Moving all system profiles and monitors to `erl_tracer`.
  - Specialized back-ends (e.g. for profiling).
  - More ways of doing *match specifications*.
  - Port tracing.
