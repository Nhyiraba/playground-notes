{
  "title": "DISTRIBUTED COMPUTING",
  "id": 1,
  "formatVersion": 2,
  "attr": {
    "style": {
      "background": "#D3D3D3"
    }
  },
  "ideas": {
    "1": {
      "title": "DEFINITION",
      "id": 2,
      "attr": {
        "style": {
          "background": "#ADFF2F"
        },
        "collapsed": true
      },
      "ideas": {
        "1": {
          "title": "It is a field of computer science that studies DISTRIBUTED SYSTEMS",
          "id": 3,
          "ideas": {
            "1": {
              "title": "It is a software system in which components located on networked computers communicate and coordinate their actions by passing messages",
              "id": 4,
              "ideas": {
                "2": {
                  "title": "The components interact with each other in order to achieve a common goal",
                  "id": 30,
                  "attr": {
                    "style": {
                      "background": "#ADFF2F"
                    },
                    "collapsed": true
                  },
                  "ideas": {
                    "1": {
                      "title": "EXAMPLES",
                      "id": 12,
                      "ideas": {
                        "1": {
                          "title": "MMO Games",
                          "id": 13,
                          "ideas": {},
                          "attr": {
                            "style": {
                              "background": "#ADFF2F"
                            }
                          }
                        },
                        "2": {
                          "title": "P2P Networks",
                          "id": 25,
                          "attr": {
                            "style": {
                              "background": "#ADFF2F"
                            }
                          }
                        },
                        "3": {
                          "title": "SOA-based Systems",
                          "id": 26,
                          "attr": {
                            "style": {
                              "background": "#ADFF2F"
                            }
                          }
                        },
                        "4": {
                          "title": "Microservices-based Systems",
                          "id": 27,
                          "attr": {
                            "style": {
                              "background": "#ADFF2F"
                            }
                          }
                        }
                      },
                      "attr": {
                        "style": {
                          "background": "#ADFF2F"
                        },
                        "collapsed": true
                      }
                    }
                  }
                }
              },
              "attr": {
                "style": {
                  "background": "#ADFF2F"
                },
                "collapsed": true
              }
            },
            "2": {
              "title": "FEATURES",
              "id": 6,
              "ideas": {
                "1": {
                  "title": "Concurrent execution across components",
                  "id": 7,
                  "ideas": {},
                  "attr": {
                    "style": {
                      "background": "#ADFF2F"
                    }
                  }
                },
                "2": {
                  "title": "Lack of a global clock",
                  "id": 10,
                  "attr": {
                    "style": {
                      "background": "#ADFF2F"
                    }
                  }
                },
                "3": {
                  "title": "Independent failure of components",
                  "id": 11,
                  "attr": {
                    "style": {
                      "background": "#ADFF2F"
                    }
                  }
                }
              },
              "attr": {
                "style": {
                  "background": "#ADFF2F"
                },
                "collapsed": true
              }
            }
          },
          "attr": {
            "style": {
              "background": "#ADFF2F"
            },
            "collapsed": true
          }
        }
      }
    },
    "2": {
      "title": "8 FALLACIES",
      "id": 34,
      "ideas": {
        "1": {
          "title": "1. THE NETWORK IS RELIABLE",
          "id": 35,
          "attr": {
            "style": {
              "background": "#F0FFFF"
            }
          }
        },
        "2": {
          "title": "2. LATENCY IS ZERO",
          "id": 37,
          "attr": {
            "style": {
              "background": "#F0FFFF"
            }
          }
        },
        "3": {
          "title": "3.  BANDWIDTH IS INFINITE",
          "id": 38,
          "attr": {
            "style": {
              "background": "#F0FFFF"
            }
          }
        },
        "4": {
          "title": "4. THE NETWORK IS SECURE",
          "id": 39,
          "attr": {
            "style": {
              "background": "#F0FFFF"
            }
          }
        },
        "5": {
          "title": "5. TOPOLOGY DOESN'T CHANGE",
          "id": 40,
          "attr": {
            "style": {
              "background": "#F0FFFF"
            }
          }
        },
        "6": {
          "title": "6. THERE IS ONE ADMINISTRATOR",
          "id": 41,
          "attr": {
            "style": {
              "background": "#F0FFFF"
            }
          }
        },
        "7": {
          "title": "7. TRANSPORT COST IS ZERO",
          "id": 42,
          "attr": {
            "style": {
              "background": "#F0FFFF"
            }
          }
        },
        "8": {
          "title": "8. THE NETWORK IS HOMOGENEOUS",
          "id": 43,
          "attr": {
            "style": {
              "background": "#F0FFFF"
            }
          }
        }
      },
      "attr": {
        "style": {
          "background": "#F0FFFF"
        },
        "collapsed": true
      }
    },
    "3": {
      "title": "PROPERTIES",
      "id": 114,
      "ideas": {
        "1": {
          "title": "CONSENSUS",
          "id": 115,
          "attr": {
            "style": {
              "background": "#008B8B"
            }
          }
        }
      },
      "attr": {
        "style": {
          "background": "#008B8B"
        },
        "collapsed": true
      }
    },
    "-2": {
      "title": "DIFFERENT MODELS",
      "id": 64,
      "ideas": {
        "2": {
          "title": "INTER-PROCESS COMMUNICATION",
          "id": 80,
          "ideas": {
            "1": {
              "title": "MESSAGE PASSING",
              "id": 81,
              "ideas": {
                "1": {
                  "title": "But still many things should be known",
                  "id": 84,
                  "ideas": {
                    "1": {
                      "title": "Are channels reliable or they are inventing new messages out of thin air?",
                      "id": 85,
                      "attr": {
                        "style": {
                          "background": "#C71585"
                        }
                      }
                    },
                    "2": {
                      "title": "Are channels delivering messages in order?",
                      "id": 86,
                      "attr": {
                        "style": {
                          "background": "#C71585"
                        }
                      }
                    },
                    "3": {
                      "title": "Are channel has FIFO/Random/LIFO characteristic?",
                      "id": 88,
                      "attr": {
                        "style": {
                          "background": "#C71585"
                        }
                      }
                    }
                  },
                  "attr": {
                    "style": {
                      "background": "#C71585"
                    }
                  }
                }
              },
              "attr": {
                "style": {
                  "background": "#7FFF00"
                }
              }
            },
            "2": {
              "title": "SHARED MEMORY",
              "id": 83,
              "attr": {
                "style": {
                  "background": "#7FFF00"
                }
              }
            }
          },
          "attr": {
            "style": {
              "background": "#7FFF00"
            },
            "collapsed": true
          }
        },
        "12": {
          "title": "FAILURE MODES",
          "id": 32,
          "ideas": {
            "7": {
              "title": "TYPES",
              "id": 50,
              "ideas": {
                "14": {
                  "title": "Ordering in types is from most severe to least one",
                  "id": 57,
                  "ideas": {
                    "1": {
                      "title": "Ordering means also inclusiveness (e.g. byzantine failures includes performance ones)",
                      "id": 51,
                      "attr": {
                        "style": {
                          "background": "#FF0000"
                        }
                      },
                      "ideas": {
                        "1": {
                          "title": "CRASH-STOP FAILURES",
                          "id": 49,
                          "attr": {
                            "style": {
                              "background": "#FFE4B5"
                            }
                          }
                        },
                        "0.5": {
                          "title": "CRASH-RECOVERY FAILURES",
                          "id": 48,
                          "attr": {
                            "style": {
                              "background": "#FFE4B5"
                            }
                          }
                        },
                        "0.25": {
                          "title": "BYZANTINE OR ARBITRARY FAILURES",
                          "id": 44,
                          "attr": {
                            "style": {
                              "background": "#DEB887"
                            }
                          }
                        },
                        "0.375": {
                          "title": "AUTHENTICATION DETECTABLE BYZANTINE FAILURES",
                          "id": 45,
                          "attr": {
                            "style": {
                              "background": "#FFE4B5"
                            }
                          }
                        },
                        "0.4375": {
                          "title": "PERFORMANCE FAILURES",
                          "id": 46,
                          "attr": {
                            "style": {
                              "background": "#FFE4B5"
                            }
                          }
                        },
                        "0.46875": {
                          "title": "OMISSION FAILURES",
                          "id": 47,
                          "attr": {
                            "style": {
                              "background": "#FFE4B5"
                            }
                          }
                        }
                      }
                    },
                    "2": {
                      "title": "Byzantine failures are only one which affects values, rest affects timing",
                      "id": 58,
                      "attr": {
                        "style": {
                          "background": "#FF0000"
                        }
                      }
                    },
                    "3": {
                      "title": "Orthogonal, we can have consistent failures and inconsistent ones ",
                      "id": 59,
                      "ideas": {
                        "1": {
                          "title": "It depends how users of the system perceive it",
                          "id": 60,
                          "attr": {
                            "style": {
                              "background": "#FF0000"
                            }
                          }
                        }
                      },
                      "attr": {
                        "style": {
                          "background": "#FF0000"
                        },
                        "collapsed": true
                      }
                    }
                  },
                  "attr": {
                    "style": {
                      "background": "#FF0000"
                    }
                  }
                }
              },
              "attr": {
                "style": {
                  "background": "#FFE4B5"
                }
              }
            },
            "8": {
              "title": "FAILURE SEMANTIC",
              "id": 61,
              "attr": {
                "style": {
                  "background": "#8FBC8F"
                }
              },
              "ideas": {
                "1": {
                  "title": "A server exhibits a given failure semantic if the probability of failures modes which are not covered by the failure semantic is sufficiently low",
                  "id": 62,
                  "attr": {
                    "style": {
                      "background": "#8FBC8F"
                    }
                  },
                  "ideas": {
                    "1": {
                      "title": "It means that if server has crash failure semantics, then the possibility of having e.g. byzantine failure should be very low",
                      "id": 63,
                      "attr": {
                        "style": {
                          "background": "#8FBC8F"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "attr": {
            "style": {
              "background": "#FFE4B5"
            },
            "collapsed": true
          }
        },
        "13": {
          "title": "LIVENESS AND SAFETY",
          "id": 95,
          "ideas": {
            "1": {
              "title": "SAFETY",
              "id": 96,
              "ideas": {
                "1": {
                  "title": "It is based on reliable channels",
                  "id": 97,
                  "ideas": {
                    "1": {
                      "title": "It means that it will not produce messages \"out of thin air\"",
                      "id": 98,
                      "attr": {
                        "style": {
                          "background": "#FA8072"
                        }
                      }
                    }
                  },
                  "attr": {
                    "style": {
                      "background": "#FA8072"
                    },
                    "collapsed": true
                  }
                },
                "2": {
                  "title": "It means that bad things in terms of delivery and messages order never happen",
                  "id": 101,
                  "attr": {
                    "style": {
                      "background": "#FA8072"
                    }
                  }
                }
              },
              "attr": {
                "style": {
                  "background": "#FA8072"
                },
                "collapsed": true
              }
            },
            "2": {
              "title": "LIVENESS",
              "id": 99,
              "ideas": {
                "1": {
                  "title": "A destination process eventually delivers the message",
                  "id": 102,
                  "attr": {
                    "style": {
                      "background": "#FA8072"
                    }
                  }
                },
                "2": {
                  "title": "It means that good things will happen eventually",
                  "id": 103,
                  "attr": {
                    "style": {
                      "background": "#FA8072"
                    }
                  }
                }
              },
              "attr": {
                "style": {
                  "background": "#FA8072"
                },
                "collapsed": true
              }
            }
          },
          "attr": {
            "style": {
              "background": "#FA8072"
            },
            "collapsed": true
          }
        },
        "0.5": {
          "title": "TIMING MODELS",
          "id": 65,
          "attr": {
            "style": {
              "background": "#FFF5EE"
            },
            "collapsed": true
          },
          "ideas": {
            "1": {
              "title": "SYNCHRONOUS",
              "id": 66,
              "ideas": {
                "1": {
                  "title": "With well-defined steps and duration of them, the same applies to message passing, scheduling etc.",
                  "id": 68,
                  "ideas": {
                    "1": {
                      "title": "You can detect failures!",
                      "id": 69,
                      "ideas": {
                        "1": {
                          "title": "Because you know that message have to travel 5 seconds to other node and no more",
                          "id": 70,
                          "attr": {
                            "style": {
                              "background": "#6495ED"
                            }
                          }
                        }
                      },
                      "attr": {
                        "style": {
                          "background": "#6495ED"
                        }
                      }
                    }
                  },
                  "attr": {
                    "style": {
                      "background": "#6495ED"
                    }
                  }
                },
                "2": {
                  "title": "It is a near to real-time  systems model",
                  "id": 75,
                  "attr": {
                    "style": {
                      "background": "#6495ED"
                    }
                  }
                }
              },
              "attr": {
                "style": {
                  "background": "#6495ED"
                },
                "collapsed": true
              }
            },
            "2": {
              "title": "ASYNCHRONOUS",
              "id": 67,
              "ideas": {
                "1": {
                  "title": "Livin' la vida loca!",
                  "id": 71,
                  "ideas": {
                    "1": {
                      "title": "Everything is possible, no guarantees for message delivery, scheduling, message passing and duration",
                      "id": 72,
                      "attr": {
                        "style": {
                          "background": "#CD5C5C"
                        }
                      }
                    }
                  },
                  "attr": {
                    "style": {
                      "background": "#CD5C5C"
                    }
                  }
                },
                "2": {
                  "title": "It is most of real-world applications",
                  "id": 77,
                  "attr": {
                    "style": {
                      "background": "#CD5C5C"
                    }
                  }
                }
              },
              "attr": {
                "style": {
                  "background": "#CD5C5C"
                },
                "collapsed": true
              }
            },
            "3": {
              "title": "SEMI-SYNCHRONOUS",
              "id": 73,
              "ideas": {
                "1": {
                  "title": "It is a mixed model, where some boundaries are defined and some not",
                  "id": 79,
                  "attr": {
                    "style": {
                      "background": "#FF7F50"
                    }
                  }
                }
              },
              "attr": {
                "style": {
                  "background": "#FF7F50"
                },
                "collapsed": true
              }
            }
          }
        }
      },
      "attr": {
        "style": {
          "background": "#ADFF2F"
        },
        "collapsed": true
      }
    },
    "-3": {
      "title": "THEORY AND PAPERS",
      "id": 104,
      "ideas": {
        "1": {
          "title": "FLP",
          "id": 105,
          "attr": {
            "style": {
              "background": "#F0FFFF"
            }
          },
          "ideas": {
            "1": {
              "title": "It stands for Fischer, Lynch, Paterson",
              "id": 106,
              "attr": {
                "style": {
                  "background": "#F0FFFF"
                }
              },
              "ideas": {}
            },
            "2": {
              "title": "Impossibility of Distributed Consensus with One Faulty Process",
              "id": 108,
              "attr": {
                "style": {
                  "background": "#F0FFFF"
                }
              },
              "ideas": {
                "1": {
                  "title": "\"In this paper, we show the surprising result that no completely asynchronous consensus protocol can tolerate even a single unannounced  process death.\" ",
                  "id": 109,
                  "attr": {
                    "style": {
                      "background": "#F0FFFF"
                    }
                  }
                },
                "2": {
                  "title": "\"We do not consider Byzantine failures, and we assume that the message system is reliable - it delivers all messages correctly and exactly once.\"",
                  "id": 110,
                  "attr": {
                    "style": {
                      "background": "#F0FFFF"
                    }
                  }
                },
                "3": {
                  "title": "\"Nevertheless, even with the assumptions, the stopping of a single process at an inopportune time can cause any distributed commit protocol to fail to reach agreement.\"",
                  "id": 112,
                  "attr": {
                    "style": {
                      "background": "#F0FFFF"
                    }
                  }
                },
                "4": {
                  "title": "\"Thus, this important problem has no robust solution without further assumptions about computing environment or still greater restrictions on the kind of failures to be tolerated.\"",
                  "id": 113,
                  "attr": {
                    "style": {
                      "background": "#F0FFFF"
                    }
                  }
                }
              }
            },
            "3": {
              "title": "In asynchronous systems there is no way to determine if process is dead and not replying or message is delayed",
              "id": 111,
              "attr": {
                "style": {
                  "background": "#F0FFFF"
                }
              }
            }
          }
        }
      },
      "attr": {
        "style": {
          "background": "#F0FFFF"
        },
        "collapsed": true
      }
    },
    "-4": {
      "title": "GUIDELINES",
      "id": 116,
      "ideas": {
        "1": {
          "title": "Distributed systems are different because they fail often",
          "id": 117,
          "ideas": {
            "1": {
              "title": "Not latency, but probability of failure is the most disturbing part",
              "id": 120,
              "ideas": {},
              "attr": {
                "style": {
                  "background": "#FF0000"
                }
              }
            },
            "2": {
              "title": "Design for failure!",
              "id": 122,
              "attr": {
                "style": {
                  "background": "#FF0000"
                }
              }
            }
          },
          "attr": {
            "style": {
              "background": "#FF0000"
            },
            "collapsed": true
          }
        },
        "2": {
          "title": "Writing robust distributed systems costs more than writing robust single-machine systems",
          "id": 119,
          "ideas": {
            "1": {
              "title": "More machines => \nMore money",
              "id": 123,
              "attr": {
                "style": {
                  "background": "#FFFF00"
                }
              }
            },
            "2": {
              "title": "Harder to achieve => More time spent =>\nMore money",
              "id": 124,
              "attr": {
                "style": {
                  "background": "#FFFF00"
                }
              }
            }
          },
          "attr": {
            "style": {
              "background": "#FFFF00"
            },
            "collapsed": true
          }
        },
        "3": {
          "title": "Robust, open source distributed systems are much less common than robust, single-machine systems",
          "id": 128,
          "ideas": {
            "1": {
              "title": "It is harder to play with it locally and on your own",
              "id": 129,
              "attr": {
                "style": {
                  "background": "#FFFF00"
                }
              }
            },
            "2": {
              "title": "It requires more knowledge and expertise, so it is less common",
              "id": 130,
              "attr": {
                "style": {
                  "background": "#FFFF00"
                }
              }
            }
          },
          "attr": {
            "style": {
              "background": "#FFFF00"
            },
            "collapsed": true
          }
        },
        "4": {
          "title": "Coordination is very hard",
          "id": 131,
          "ideas": {
            "1": {
              "title": "Avoid coordinating machines wherever possible",
              "id": 133,
              "ideas": {
                "1": {
                  "title": "This is often described as “horizontal scalability”",
                  "id": 134,
                  "attr": {
                    "style": {
                      "background": "#FF0000"
                    }
                  }
                },
                "2": {
                  "title": "The real trick of horizontal scalability is independence",
                  "id": 135,
                  "attr": {
                    "style": {
                      "background": "#FF0000"
                    }
                  }
                }
              },
              "attr": {
                "style": {
                  "background": "#FF0000"
                },
                "collapsed": true
              }
            },
            "2": {
              "title": "Two Generals, Byzantine Generals, Paxos, Raft, ZAB ...",
              "id": 136,
              "attr": {
                "style": {
                  "background": "#FF0000"
                }
              }
            }
          },
          "attr": {
            "style": {
              "background": "#FF0000"
            },
            "collapsed": true
          }
        },
        "5": {
          "title": "If you can fit your problem in memory, it’s probably trivial",
          "id": 137,
          "attr": {
            "style": {
              "background": "#FFFF00"
            },
            "collapsed": true
          },
          "ideas": {
            "1": {
              "title": "Managing a single machine is easier than managing a cluster",
              "id": 141,
              "attr": {
                "style": {
                  "background": "#FFFF00"
                }
              }
            }
          }
        },
        "6": {
          "title": "“It’s slow” is the hardest problem you’ll ever debug",
          "id": 138,
          "attr": {
            "style": {
              "background": "#FF0000"
            },
            "collapsed": true
          },
          "ideas": {
            "1": {
              "title": "Distributed Tracing is the key",
              "id": 139,
              "ideas": {
                "1": {
                  "title": "The same applies to metrics",
                  "id": 140,
                  "attr": {
                    "style": {
                      "background": "#FF0000"
                    }
                  }
                }
              },
              "attr": {
                "style": {
                  "background": "#FF0000"
                },
                "collapsed": true
              }
            }
          }
        },
        "7": {
          "title": "Implement backpressure throughout your system",
          "id": 142,
          "attr": {
            "style": {
              "background": "#FFE4B5"
            },
            "collapsed": true,
            "position": [
              332,
              -14,
              15
            ]
          },
          "ideas": {
            "1": {
              "title": "Backpressure is the signaling of failure from a serving system to the requesting system and how the requesting system handles those failures to prevent overloading itself and the serving system",
              "id": 143,
              "ideas": {
                "1": {
                  "title": "Dropping on the floor and reporting it as a metrics",
                  "id": 144,
                  "attr": {
                    "style": {
                      "background": "#FFE4B5"
                    }
                  }
                },
                "2": {
                  "title": "Timeouts and exponential backoff is also helpful",
                  "id": 145,
                  "attr": {
                    "style": {
                      "background": "#FFE4B5"
                    }
                  }
                }
              },
              "attr": {
                "style": {
                  "background": "#FFE4B5"
                },
                "collapsed": true
              }
            },
            "2": {
              "title": "Without it cascading failures and unintentional message loss will eventually happen",
              "id": 147,
              "attr": {
                "style": {
                  "background": "#FFE4B5"
                }
              }
            }
          }
        },
        "8": {
          "title": "Find ways to be partially available",
          "id": 148,
          "attr": {
            "style": {
              "background": "#FFE4B5"
            },
            "collapsed": true,
            "position": [
              336,
              93,
              14
            ]
          },
          "ideas": {
            "1": {
              "title": "Disabling features, degrading performance and functionality - no holds barred!",
              "id": 149,
              "attr": {
                "style": {
                  "background": "#FFE4B5"
                }
              }
            }
          }
        },
        "9": {
          "title": "Metrics are the only way to get your job done",
          "id": 150,
          "attr": {
            "style": {
              "background": "#FFE4B5"
            },
            "collapsed": true
          },
          "ideas": {
            "1": {
              "title": "Logging is good to have but it tend to lie",
              "id": 151,
              "ideas": {
                "1": {
                  "title": "Also logs aggregation is hard and also it requires managing log files (rotation, back-ups, transferring)",
                  "id": 152,
                  "attr": {
                    "style": {
                      "background": "#FFE4B5"
                    }
                  }
                }
              },
              "attr": {
                "style": {
                  "background": "#FFE4B5"
                },
                "collapsed": true
              }
            }
          }
        },
        "10": {
          "title": "Use percentiles, not averages",
          "id": 153,
          "ideas": {
            "1": {
              "title": "50th, \n99th, \n99.9th, \n99.99th",
              "id": 155,
              "attr": {
                "style": {
                  "background": "#FFE4B5"
                }
              }
            },
            "2": {
              "title": "Average make sense only for normal, bell curve",
              "id": 156,
              "ideas": {
                "1": {
                  "title": "Did you see any latency distribution similar to the gauss distribution?",
                  "id": 157,
                  "ideas": {
                    "1": {
                      "title": "No, that's why percentiles are crucial",
                      "id": 158,
                      "attr": {
                        "style": {
                          "background": "#FFE4B5"
                        }
                      }
                    }
                  },
                  "attr": {
                    "style": {
                      "background": "#FFE4B5"
                    }
                  }
                }
              },
              "attr": {
                "style": {
                  "background": "#FFE4B5"
                }
              }
            }
          },
          "attr": {
            "style": {
              "background": "#FFE4B5"
            },
            "collapsed": true
          }
        },
        "11": {
          "title": "Learn to estimate your capacity",
          "id": 159,
          "attr": {
            "style": {
              "background": "#FFE4B5"
            },
            "collapsed": true
          },
          "ideas": {
            "1": {
              "title": "Capacity Planning FTW",
              "id": 160,
              "attr": {
                "style": {
                  "background": "#FFE4B5"
                }
              }
            },
            "2": {
              "title": "Calculations at the back on the envelope are helpful",
              "id": 162,
              "attr": {
                "style": {
                  "background": "#FFE4B5"
                }
              }
            }
          }
        },
        "12": {
          "title": "Feature flags are how infrastructure is rolled out",
          "id": 163,
          "attr": {
            "style": {
              "background": "#FFE4B5"
            }
          }
        },
        "13": {
          "title": "Choose id spaces wisely",
          "id": 164,
          "ideas": {
            "1": {
              "title": "Be reasonable choosing this, because it will influence your system",
              "id": 166,
              "attr": {
                "style": {
                  "background": "#FFFF00"
                }
              }
            },
            "2": {
              "title": "No other decisions will have so long-term consequences ",
              "id": 167,
              "attr": {
                "style": {
                  "background": "#FFFF00"
                }
              }
            }
          },
          "attr": {
            "style": {
              "background": "#FFFF00"
            },
            "collapsed": true
          }
        },
        "14": {
          "title": "Exploit data-locality",
          "id": 165,
          "attr": {
            "style": {
              "background": "#FFE4B5"
            },
            "collapsed": true
          },
          "ideas": {
            "1": {
              "title": "Caches are good, but better is having data in server's memory",
              "id": 168,
              "attr": {
                "style": {
                  "background": "#FFE4B5"
                }
              }
            },
            "2": {
              "title": "When you can, use persistent connections, sticky sessions to exploit it",
              "id": 169,
              "attr": {
                "style": {
                  "background": "#FFE4B5"
                }
              },
              "ideas": {
                "1": {
                  "title": "It is not also more performant, but also much more resilient",
                  "id": 171,
                  "ideas": {
                    "1": {
                      "title": "No network, \nno RPC, \nno other calls",
                      "id": 172,
                      "attr": {
                        "style": {
                          "background": "#FFE4B5"
                        }
                      }
                    }
                  },
                  "attr": {
                    "style": {
                      "background": "#FFE4B5"
                    }
                  }
                }
              }
            }
          }
        },
        "15": {
          "title": "Writing cached data back to persistent storage is bad",
          "id": 173,
          "attr": {
            "style": {
              "background": "#FF0000"
            },
            "collapsed": true
          },
          "ideas": {
            "1": {
              "title": "E.g. restoring edited user name or avatar to previous value because we've persisted again cached value",
              "id": 175,
              "attr": {
                "style": {
                  "background": "#FF0000"
                }
              }
            }
          }
        },
        "16": {
          "title": "Computers can do more than you think they can",
          "id": 178,
          "ideas": {
            "1": {
              "title": "Greater performance is not hard to come by, especially if you are willing to profile your application and introduce efficiencies based on your measurements",
              "id": 181,
              "attr": {
                "style": {
                  "background": "#FFFF00"
                }
              }
            }
          },
          "attr": {
            "style": {
              "background": "#FFFF00"
            },
            "collapsed": true
          }
        },
        "17": {
          "title": "Use the CAP theorem to critique systems",
          "id": 179,
          "ideas": {
            "1": {
              "title": "It is well-suited for critiquing a distributed system design, and understanding what trade-offs need to be made.",
              "id": 183,
              "attr": {
                "style": {
                  "background": "#FFE4B5"
                }
              }
            },
            "2": {
              "title": "Out of C, A, and P, you can’t choose CA",
              "id": 185,
              "attr": {
                "style": {
                  "background": "#FFE4B5"
                }
              }
            },
            "0.5": {
              "title": "The CAP theorem isn’t something you can build a system out of",
              "id": 184,
              "attr": {
                "style": {
                  "background": "#FFE4B5"
                }
              }
            }
          },
          "attr": {
            "style": {
              "background": "#FFE4B5"
            },
            "collapsed": true
          }
        },
        "18": {
          "title": "Extract services",
          "id": 180,
          "ideas": {
            "1": {
              "title": "Service =>\na distributed system that incorporates higher-level logic than a storage system and typically has a request-response style API\n",
              "id": 186,
              "attr": {
                "style": {
                  "background": "#FFE4B5"
                }
              }
            },
            "2": {
              "title": "By extracting a service, the client systems don’t have to know about the complexities of the slow migration to a new storage system or format and only the new service has to be evaluated for bugs that will certainly be found with the new storage layout",
              "id": 187,
              "attr": {
                "style": {
                  "background": "#FFE4B5"
                }
              }
            },
            "3": {
              "title": "It is like SRP and DRY in distributed world",
              "id": 188,
              "attr": {
                "style": {
                  "background": "#FFE4B5"
                }
              }
            }
          },
          "attr": {
            "style": {
              "background": "#FFE4B5"
            },
            "collapsed": true
          }
        }
      },
      "attr": {
        "style": {
          "background": "#00008B"
        },
        "collapsed": true
      }
    },
    "-14": {
      "title": "ARCHITECTURES",
      "id": 189,
      "ideas": {
        "1": {
          "title": "OPTIMIZED FOR PERFORMANCE ",
          "id": 190,
          "attr": {
            "style": {
              "background": "#FFEBCD"
            },
            "collapsed": true
          },
          "ideas": {
            "1": {
              "title": "LMAX Disruptor",
              "id": 191,
              "attr": {
                "style": {
                  "background": "#FFEBCD"
                }
              },
              "ideas": {
                "2": {
                  "title": "\"Virtual\" run-time and deployment environment",
                  "id": 193,
                  "attr": {
                    "style": {
                      "background": "#FFEBCD"
                    },
                    "collapsed": true
                  },
                  "ideas": {
                    "1": {
                      "title": "Not functional, but sequential!",
                      "id": 194,
                      "attr": {
                        "style": {
                          "background": "#FFEBCD"
                        }
                      }
                    },
                    "2": {
                      "title": "Troughput - 6M (even 30M) TPS",
                      "id": 192,
                      "attr": {
                        "style": {
                          "background": "#FFEBCD"
                        }
                      }
                    }
                  }
                },
                "4": {
                  "title": "Implemented from clean slate, without a technical debt and domain overhead",
                  "id": 199,
                  "attr": {
                    "style": {
                      "background": "#FFEBCD"
                    },
                    "collapsed": true
                  },
                  "ideas": {
                    "1": {
                      "title": "Focused on \n\"Mechanical Sympathy\"",
                      "id": 200,
                      "attr": {
                        "style": {
                          "background": "#FFEBCD"
                        }
                      },
                      "ideas": {}
                    }
                  }
                },
                "5": {
                  "title": "Neat ideas - keys for the \nDisruptor's performance",
                  "id": 204,
                  "ideas": {
                    "1": {
                      "title": "Cache friendly rules",
                      "id": 202,
                      "ideas": {
                        "1": {
                          "title": "L1, L2, L3, Store Buffers (for minimizing influence of instruction reordering) and Registers",
                          "id": 203,
                          "attr": {
                            "style": {
                              "background": "#FFEBCD"
                            }
                          }
                        },
                        "2": {
                          "title": "Reducing cache misses",
                          "id": 205,
                          "attr": {
                            "style": {
                              "background": "#FFEBCD"
                            }
                          }
                        },
                        "3": {
                          "title": "Don't share \nyour cache line!",
                          "id": 207,
                          "attr": {
                            "style": {
                              "background": "#FFEBCD"
                            }
                          }
                        },
                        "4": {
                          "title": "Predictable access begets pre-fetching",
                          "id": 208,
                          "attr": {
                            "style": {
                              "background": "#FFEBCD"
                            }
                          }
                        }
                      },
                      "attr": {
                        "style": {
                          "background": "#FFEBCD"
                        },
                        "collapsed": true
                      }
                    },
                    "4": {
                      "title": "Memory friendly rules",
                      "id": 218,
                      "ideas": {
                        "1": {
                          "title": "Pre-allocate and reuse memory!",
                          "id": 213,
                          "attr": {
                            "style": {
                              "background": "#FFEBCD"
                            }
                          }
                        },
                        "2": {
                          "title": "Reuse of memory prevents GC and compaction",
                          "id": 209,
                          "attr": {
                            "style": {
                              "background": "#FFEBCD"
                            }
                          },
                          "ideas": {}
                        }
                      },
                      "attr": {
                        "style": {
                          "background": "#FFEBCD"
                        },
                        "collapsed": true
                      }
                    },
                    "5": {
                      "title": "CPU friendly rules",
                      "id": 219,
                      "ideas": {
                        "1": {
                          "title": "Avoid locks",
                          "id": 210,
                          "attr": {
                            "style": {
                              "background": "#FFEBCD"
                            }
                          },
                          "ideas": {
                            "1": {
                              "title": "Switching cores penalty related with cache reloading, cache misses and copying",
                              "id": 216,
                              "attr": {
                                "style": {
                                  "background": "#FFEBCD"
                                },
                                "collapsed": true
                              },
                              "ideas": {
                                "1": {
                                  "title": "Use core affinity for pinning threads into cores",
                                  "id": 217,
                                  "attr": {
                                    "style": {
                                      "background": "#FFEBCD"
                                    }
                                  }
                                }
                              }
                            },
                            "2": {
                              "title": "Minimize usage of memory barriers",
                              "id": 211,
                              "attr": {
                                "style": {
                                  "background": "#FFEBCD"
                                }
                              }
                            },
                            "3": {
                              "title": "Control the core and your threads",
                              "id": 212,
                              "attr": {
                                "style": {
                                  "background": "#FFEBCD"
                                }
                              },
                              "ideas": {}
                            }
                          }
                        }
                      },
                      "attr": {
                        "style": {
                          "background": "#FFEBCD"
                        },
                        "collapsed": true
                      }
                    },
                    "6": {
                      "title": "Implementation rules",
                      "id": 221,
                      "ideas": {
                        "1": {
                          "title": "Always favor \nring buffers \nover \nqueues!",
                          "id": 222,
                          "ideas": {
                            "1": {
                              "title": "They're bounded arrays, pre-allocated at once, re-traversed",
                              "id": 223,
                              "ideas": {
                                "1": {
                                  "title": "Modulo FTW",
                                  "id": 225,
                                  "attr": {
                                    "style": {
                                      "background": "#FFEBCD"
                                    }
                                  }
                                }
                              },
                              "attr": {
                                "style": {
                                  "background": "#FFEBCD"
                                },
                                "collapsed": true
                              }
                            },
                            "2": {
                              "title": "It works like that inside NIC (network cards)",
                              "id": 224,
                              "attr": {
                                "style": {
                                  "background": "#FFEBCD"
                                }
                              }
                            }
                          },
                          "attr": {
                            "style": {
                              "background": "#FFEBCD"
                            },
                            "collapsed": true
                          }
                        }
                      },
                      "attr": {
                        "style": {
                          "background": "#FFEBCD"
                        },
                        "collapsed": true
                      }
                    },
                    "7": {
                      "title": "CONCEPTS",
                      "id": 227,
                      "ideas": {
                        "1": {
                          "title": "Producer",
                          "id": 228,
                          "ideas": {
                            "1": {
                              "title": "For all kind of I/O and also a circuit breakers ",
                              "id": 230,
                              "attr": {
                                "style": {
                                  "background": "#FFEBCD"
                                }
                              }
                            },
                            "2": {
                              "title": "It does sequencing, protect from overwriting data in use",
                              "id": 231,
                              "ideas": {
                                "1": {
                                  "title": "Claim strategy",
                                  "id": 232,
                                  "attr": {
                                    "style": {
                                      "background": "#FFEBCD"
                                    }
                                  },
                                  "ideas": {}
                                },
                                "2": {
                                  "title": "You can optimize by using batching effect",
                                  "id": 234,
                                  "attr": {
                                    "style": {
                                      "background": "#FFEBCD"
                                    }
                                  }
                                }
                              },
                              "attr": {
                                "style": {
                                  "background": "#FFEBCD"
                                }
                              }
                            }
                          },
                          "attr": {
                            "collapsed": true,
                            "style": {
                              "background": "#FFEBCD"
                            }
                          }
                        },
                        "2": {
                          "title": "Consumers",
                          "id": 235,
                          "ideas": {
                            "1": {
                              "title": "Also does sequencing, but with wait strategy",
                              "id": 236,
                              "ideas": {
                                "1": {
                                  "title": "Also batching is applicable",
                                  "id": 237,
                                  "attr": {
                                    "style": {
                                      "background": "#FFEBCD"
                                    }
                                  }
                                }
                              },
                              "attr": {
                                "style": {
                                  "background": "#FFEBCD"
                                },
                                "collapsed": true
                              }
                            },
                            "2": {
                              "title": "Intelligent sharing with one data structure for all consumers",
                              "id": 238,
                              "ideas": {
                                "1": {
                                  "title": "It results in increased throughput and reduced latency, when some consumers are slowing down",
                                  "id": 239,
                                  "attr": {
                                    "style": {
                                      "background": "#FFEBCD"
                                    }
                                  }
                                }
                              },
                              "attr": {
                                "style": {
                                  "background": "#FFEBCD"
                                },
                                "collapsed": true
                              }
                            }
                          },
                          "attr": {
                            "style": {
                              "background": "#FFEBCD"
                            },
                            "collapsed": true
                          }
                        },
                        "3": {
                          "title": "Batching Effect",
                          "id": 240,
                          "ideas": {
                            "1": {
                              "title": "Used in both places, has amazing catch up capability",
                              "id": 241,
                              "attr": {
                                "style": {
                                  "background": "#FFEBCD"
                                }
                              }
                            },
                            "2": {
                              "title": "It performs better when load increases and it is much stable when it comes to latency",
                              "id": 242,
                              "attr": {
                                "style": {
                                  "background": "#FFEBCD"
                                }
                              }
                            }
                          },
                          "attr": {
                            "style": {
                              "background": "#FFEBCD"
                            },
                            "collapsed": true
                          }
                        },
                        "4": {
                          "title": "Event Sourcing",
                          "id": 243,
                          "ideas": {
                            "1": {
                              "title": "Another place where it is used!",
                              "id": 244,
                              "attr": {
                                "style": {
                                  "background": "#FFEBCD"
                                }
                              }
                            },
                            "2": {
                              "title": "Replaying, daily snapshots, daily restarts to clear all memory",
                              "id": 245,
                              "attr": {
                                "style": {
                                  "background": "#FFEBCD"
                                }
                              }
                            },
                            "3": {
                              "title": "Using immutable WAL (Write-Ahead-Logs) is no different on SSD and HDD because it is a sequential write",
                              "id": 246,
                              "attr": {
                                "style": {
                                  "background": "#FFEBCD"
                                }
                              }
                            }
                          },
                          "attr": {
                            "style": {
                              "background": "#FFEBCD"
                            },
                            "collapsed": true
                          }
                        }
                      },
                      "attr": {
                        "style": {
                          "background": "#FFEBCD"
                        },
                        "collapsed": true
                      }
                    }
                  },
                  "attr": {
                    "style": {
                      "background": "#FFEBCD"
                    },
                    "collapsed": true
                  }
                },
                "6": {
                  "title": "USAGE",
                  "id": 247,
                  "ideas": {
                    "1": {
                      "title": "Balanced flow, without interrupts and waiting for data",
                      "id": 248,
                      "attr": {
                        "style": {
                          "background": "#FFEBCD"
                        }
                      }
                    }
                  },
                  "attr": {
                    "style": {
                      "background": "#FFEBCD"
                    },
                    "collapsed": true
                  }
                }
              }
            }
          }
        },
        "2": {
          "title": "SEDA",
          "id": 195,
          "ideas": {
            "1": {
              "title": "Staged Event Driven Architecture",
              "id": 196,
              "attr": {
                "style": {
                  "background": "#FFEBCD"
                }
              }
            }
          },
          "attr": {
            "style": {
              "background": "#FFEBCD"
            },
            "collapsed": true
          }
        },
        "3": {
          "title": "Actor Model",
          "id": 197,
          "ideas": {
            "1": {
              "title": "Subset of SEDA, which is lock-free and isolated",
              "id": 198,
              "attr": {
                "style": {
                  "background": "#FFEBCD"
                }
              }
            }
          },
          "attr": {
            "style": {
              "background": "#FFEBCD"
            },
            "collapsed": true
          }
        }
      },
      "attr": {
        "style": {
          "background": "#FFEBCD"
        },
        "collapsed": true
      }
    }
  },
  "links": [
    {
      "ideaIdFrom": 150,
      "ideaIdTo": 138,
      "attr": {
        "style": {
          "color": "#FF0000",
          "lineStyle": "dashed"
        }
      }
    }
  ]
}